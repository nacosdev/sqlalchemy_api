{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>SQLAlchemy API is a library that helps to turn the SQLAlchemy models into a REST API, allowing all the basic CRUD operations. It uses the power of Pydantic 2, to validate and serialize the data. This is a framework-agnostic library that can be used with any web framework. Currently, it provides support for Starlette and FastAPI.</p> <p>Documentation: https://nacosdev.github.io/sqlalchemy_api</p> <p>Source Code: https://github.com/nacosdev/sqlalchemy_api</p> <p>Table of Contents</p> <ul> <li>Requirements</li> <li>Installation</li> <li>License</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python&gt;=3.7</li> <li>SQLAlchemy&gt;=1.4</li> <li>Pydantic&gt;=2</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install sqlalchemy-api\n</code></pre>"},{"location":"#example","title":"Example","text":""},{"location":"#create-it","title":"Create it","text":"<ul> <li>Create a file <code>main.py</code> with SQLAlchemy models and mount the crud using one of the adapters, in this example we will use the FastAPI adapter:</li> </ul> <pre><code>from sqlalchemy_api.adapters.fastapi_crud import APICrud\nfrom sqlalchemy import Column, Integer, String, create_engine, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom fastapi import FastAPI\n\nBase = declarative_base()\n\nengine = create_engine(\n    \"sqlite:///example.db\",\n    connect_args={\"check_same_thread\": False},\n)\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), default=\"John Doe\")\n    age = Column(Integer, nullable=False)\n    posts = relationship(\"Post\", back_populates=\"user\")\n\nclass Post(Base):\n    __tablename__ = \"post\"\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    content = Column(String)\n    user_id = Column(Integer, ForeignKey(\"user.id\"), nullable=False)\n    user = relationship(\"User\", back_populates=\"posts\")\n\nBase.metadata.create_all(engine)  # Create tables\n\nuser_crud_router = APICrud(User, engine)\npost_crud_router = APICrud(Post, engine)\n\napp = FastAPI()\napp.include_router(user_crud_router, prefix=\"/user\", tags=[\"User\"])\napp.include_router(post_crud_router, prefix=\"/post\", tags=[\"Post\"])\n</code></pre> <p>You will also need an ASGI server and FastAPI to be able to run this app, both are optional dependencies of SQLAlchemy API:</p> <pre><code>pip install sqlalchemy-api[fastapi]\n</code></pre>"},{"location":"#run-it","title":"Run it","text":"<pre><code>uvicorn main:app --reload\n</code></pre>"},{"location":"#use-it","title":"Use it","text":"<p>Endpoints are automatically generated for the defined models and the FastAPI adapter provides automatic Swagger documentation, you can access localhost:8000/docs to interact with them:</p> <p> </p> <p>SQLAlchemyAPI also provides different operators depending on the column data type, to filter the data:</p> <p> </p> <p>The data returned is automatically paginated and serialized, including the relationships defined in the models:</p> <p> </p> <p>Post data is automatically validated and serialized using Pydantic, for example, if you try to create a user wihout the required <code>age</code> field, you will get an error like this:</p> <p> </p>"},{"location":"#license","title":"License","text":"<p><code>sqlalchemy-api</code> is distributed under the terms of the MIT license.</p>"},{"location":"adapters/fastapi/","title":"Fastapi","text":""},{"location":"adapters/fastapi/#simple-example","title":"Simple example","text":"<ul> <li>Create a file <code>main.py</code> with SQLAlchemy models:</li> </ul> <pre><code>from fastapi import FastAPI\nfrom sqlalchemy_api.adapters.fastapi_crud import APICrud\nfrom sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()\nengine = create_engine(\n\"sqlite:///example.db\",\nconnect_args={\"check_same_thread\": False},\n)\nclass User(Base):\n__tablename__ = \"users\"\nid = Column(Integer, primary_key=True)\nname = Column(String)\nBase.metadata.create_all(engine)  # Create tables\nuser_crud_router = APICrud(User, engine)\n\napp = FastAPI()\napp.include_router(user_crud_router, prefix=\"/user\", tags=[\"User\"])\n</code></pre> <p>FastAPI adapter is an instance of APIRouter, so you can include it in your app as any other FastAPI router.</p> <p><pre><code>from fastapi import FastAPI\nfrom sqlalchemy_api.adapters.fastapi_crud import APICrud\nfrom sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nengine = create_engine(\n    \"sqlite:///example.db\",\n    connect_args={\"check_same_thread\": False},\n)\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nBase.metadata.create_all(engine)  # Create tables\n\nuser_crud_router = APICrud(User, engine)\napp = FastAPI()\napp.include_router(user_crud_router, prefix=\"/user\", tags=[\"User\"])\n</code></pre> If you are running this app without a previos FastAPI instalation, you will also need an ASGI server and FastAPI to be able to run this app, both are optional dependencies of SQLAlchemy API:</p> <pre><code>pip install sqlalchemy-api[fastapi]\n</code></pre>"},{"location":"adapters/fastapi/#run-it","title":"Run it","text":"<pre><code>uvicorn main:app --reload\n</code></pre>"},{"location":"adapters/fastapi/#use-it","title":"Use it","text":"<p>All the CRUD endpoints are now available at http://localhost:8000/user and the OpenAPI documentation at http://localhost:8000/docs:</p>"},{"location":"adapters/introduction/","title":"Introduction","text":"<p>SQLAlchemyAPI is framewoork agnostic library, and you can use it with any web framework. Currently, it provides addapters for Starlette and FastAPI (Blackship adapter is under development).</p> <p>How to mount the APICrud instance will depend on the framework you are using, more details of each in:</p> <ul> <li>Starlette</li> <li>FastAPI</li> </ul>"},{"location":"adapters/starlette/","title":"Starlette","text":""},{"location":"adapters/starlette/#apicrud","title":"APICrud","text":""},{"location":"adapters/starlette/#basic-example","title":"Basic example","text":"<p>Let's create a simple SQLAlchemy model:</p> <pre><code>from starlette.routing import Mount\nfrom starlette.applications import Starlette\nfrom sqlalchemy_api.adapters.starlette_crud import APICrud\nfrom sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()\nengine = create_engine(\n\"sqlite:///example.db\",\nconnect_args={\"check_same_thread\": False},\n)\nclass User(Base):\n__tablename__ = \"users\"\nid = Column(Integer, primary_key=True)\nname = Column(String)\nBase.metadata.create_all(engine)  # Create tables\nroutes = [\n    Mount(\n        path=\"/user\",\n        app=APICrud(model=User, engine=engine),\n    ),\n]\n\napp = Starlette(routes=routes)\n</code></pre> <p>The created APICrud is an instance of Starlette, so you can mount it as a sub-application in your main Starlette app.</p> <pre><code>from starlette.routing import Mount\nfrom starlette.applications import Starlette\nfrom sqlalchemy_api.adapters.starlette_crud import APICrud\nfrom sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nengine = create_engine(\n    \"sqlite:///example.db\",\n    connect_args={\"check_same_thread\": False},\n)\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nBase.metadata.create_all(engine)  # Create tables\n\nroutes = [\nMount(\npath=\"/user\",\napp=APICrud(model=User, engine=engine),\n),\n]\napp = Starlette(routes=routes)\n</code></pre> <p>If you are running this app without a previos Starlette instalation, you will also need an ASGI server and Starlette to be able to run this app, both are optional dependencies of SQLAlchemy API:</p> <pre><code>pip install sqlalchemy-api[asgi]\n</code></pre>"},{"location":"adapters/starlette/#run-it","title":"Run it","text":"<pre><code>uvicorn main:app --reload\n</code></pre> <p>All the CRUD endpoints are now available at http://localhost:8000/user/:</p>"},{"location":"adapters/starlette/#use-it","title":"Use it","text":"<p>Endpoints are automatically generated for the defined model, you can use the following endpoints to interact with them:</p> <ul> <li>Create: <code>POST localhost:8000/user</code> <pre><code>curl -X 'POST' \\\n'http://localhost:8000/user/' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"name\": \"foo\"\n}'\n</code></pre></li> <li>Get Many: <code>GET localhost:8000/user</code> <pre><code>curl -X 'GET' \\\n'http://localhost:8000/user/?page_size=100&amp;page=1' \\\n-H 'accept: application/json'\n</code></pre></li> <li>Get One: <code>GET localhost:8000/user/{id}</code> <pre><code>curl -X 'GET' \\\n'http://localhost:8000/user/1' \\\n-H 'accept: application/json'\n</code></pre></li> <li>Update: <code>PUT localhost:8000/user/{id}</code> <pre><code>curl -X 'PUT' \\\n'http://localhost:8000/user/1' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"name\": \"bar\"\n}'\n</code></pre></li> <li>Delete: <code>DELETE localhost:8000/user/{id}</code> <pre><code>curl -X 'DELETE' \\\n'http://localhost:8000/user/1' \\\n-H 'accept: application/json'\n</code></pre></li> </ul>"},{"location":"auth/introduction/","title":"Introduction","text":""},{"location":"auth/introduction/#under-construction","title":"Under construction \ud83d\udea7","text":""},{"location":"crud/create/","title":"Create","text":"<p>For the example we will use the following SQLAlchemy model definition.</p> <pre><code>class User(Base):\n    __tablename__ = \"user\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    age = Column(Integer, nullable=False)\n    date_of_birth = Column(Date)\n    address = Column(String(100))\n</code></pre> <p>Records are created by sending a <code>POST</code> request with a <code>json</code> in the payload using the name of the columns as keys, example values: <pre><code>{\n\"name\": \"John\",\n\"age\": 18,\n\"date_of_birth\": \"2000-01-01\",\n\"address\": \"Street 1\"\n}\n</code></pre> Example request:</p> <p><pre><code>curl -X 'POST' \\\n'http://&lt;hostname&gt;/&lt;mount_path&gt;/' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"name\": \"John\",\n    \"age\": 18,\n    \"date_of_birth\": \"2000-01-01\",\n    \"address\": \"Street 1\"\n}'\n</code></pre> This request will return the created record in <code>json</code> format, example response: <pre><code>{\n\"id\": 1,\n\"name\": \"John\",\n\"age\": 18,\n\"date_of_birth\": \"2000-01-01\",\n\"address\": \"Street 1\"\n}\n</code></pre></p>"},{"location":"crud/delete/","title":"Delete","text":"<p>Delete a record by sending a <code>DELETE</code> request with the primary key as part of the path. </p>"},{"location":"crud/delete/#example","title":"Example","text":"<pre><code>curl -X 'DELETE' \\\n'http://localhost:8000/user/1' \\\n-H 'accept: application/json'\n</code></pre> <p>The response will be the deleted record id, example response: <pre><code>{\n\"id\": 1\n}\n</code></pre></p>"},{"location":"crud/introduction/","title":"Introduction","text":""},{"location":"crud/introduction/#crud","title":"CRUD","text":"<p>SQLAlchemy API will provide the resources to create, read, update and delete your  SQLAlchemy models, by using starndar API REST endpoints.</p>"},{"location":"crud/introduction/#endpoints","title":"Endpoints","text":"Path Method Description <code>/</code> <code>POST</code> Create new record <code>/</code> <code>GET</code> Get all records <code>/{row_id}</code> <code>GET</code> Get record by primary key <code>/{row_id}</code> <code>PUT</code> Update record by primary key <code>/{row_id}</code> <code>DELETE</code> Delete record by primary key"},{"location":"crud/introduction/#apicrud","title":"APICrud","text":"<p>Each adapter will provide an <code>APICrud</code> class that will be used to mount the CRUD endpoints. The <code>APICrud</code> class will receive the SQLAlchemy model and the SQLAlchemy engine as parameters.</p> <pre><code>from sqlalchemy_api.adapters.&lt;adapter&gt;_crud import APICrud\nfrom sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nengine = create_engine(\n    \"sqlite:///example.db\",\n    connect_args={\"check_same_thread\": False},\n)\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nBase.metadata.create_all(engine)  # Create tables\n\napp = APICrud(User, engine)\n</code></pre>"},{"location":"crud/introduction/#api-reference","title":"API reference","text":"<p><code>APICrud</code> can be configured with the following parameters:</p> <pre><code>def __init__(\n    self,\n    model,\n    engine: Union[Engine, AsyncEngine],\n    async_engine: bool = False,\n    page_size_default: int = 100,\n    page_size_max: int = 1000,\n    debug: bool = False,\n)\n</code></pre> Parameter Type Description Default model DeclarativeBase The SQLAlchemy model to be used required engine Union[Engine, AsyncEngine] The SQLAlchemy engine to be used required async_engine bool Whether the engine is async or not False page_size_default int The default page size to be used 100 page_size_max int The maximum page size that can be used 1000 debug bool Whether to enable debug mode or not* False <p>Info</p> <p><code>debug=True</code> will return the raw unhandled exceptions traceback in the response body. This is useful for debugging, but should not be used in production.</p>"},{"location":"crud/read/","title":"Read","text":"<p>Records are get by sending a <code>GET</code> request to the mount path of the SQLAlchemyCRUD app, you can use any of the filter operators.</p>"},{"location":"crud/read/#filtering","title":"Filtering","text":"<p>SQLAlchemy API supports filtering records by any column. You can use the following query parameters to filter records by different operators:</p> Operator Expression Supported types <code>Equal</code> <code>&lt;column&gt;__op=equal</code> All <code>Not equal</code> <code>&lt;column&gt;__op=ne</code> All <code>Is Null</code> <code>&lt;column&gt;__op=is_null</code> All <code>Is Not Null</code> <code>&lt;column&gt;__op=is_not_null</code> All <code>Greater than</code> <code>&lt;column&gt;__op=gt</code> Numeric, Date <code>Greater than or equal</code> <code>&lt;column&gt;__op=ge</code> Numeric, Date <code>Less than</code> <code>&lt;column&gt;__op=lt</code> Numeric, Date <code>Less than or equal</code> <code>&lt;column&gt;__op=le</code> Numeric, Date <code>Contains</code> <code>&lt;column&gt;__op=contains</code> String <code>Starts with</code> <code>&lt;column&gt;__op=startswith</code> String <code>Ends with</code> <code>&lt;column&gt;__op=endswith</code> String <p>Note</p> <p>If no filter operator is provided, the default operator is <code>equal</code>.</p>"},{"location":"crud/read/#pagination","title":"Pagination","text":"<p>All the data retrieved from the database is paginated, you can use the following query parameters to control the pagination:</p> query parameter description default value <code>page</code> The page number to retrieve 1 <code>page_size</code> The number of records per page 100"},{"location":"crud/read/#response","title":"Response","text":"<p>The response will be a <code>json</code> with the following structure:</p> <pre><code>{   \n    \"total\": 1,\n    \"page\": 1,\n    \"records\": [{}],\n}\n</code></pre> <p>Where: </p> <ul> <li><code>total</code>: number of records for this query in the database.</li> <li><code>page</code>: current page number.</li> <li><code>records</code>: is a list of objects with the records.</li> </ul>"},{"location":"crud/read/#examples","title":"Examples","text":"<p>For the example we will assume the SQLAlchemyAPI CRUD is mounted in <code>http://localhost:8000/user/</code> using the following SQLAlchemy model definition.</p> <pre><code>class User(Base):\n    __tablename__ = \"user\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    age = Column(Integer, nullable=False)\n    date_of_birth = Column(Date)\n    address = Column(String(100))\n</code></pre>"},{"location":"crud/read/#filters","title":"Filters","text":"<p>Get all records with age greater than 18</p> <pre><code>curl -X 'GET' \\\n'http://localhost:8000/user/?age__op=gt&amp;age=18'  \\\n-H 'accept: application/json'\n</code></pre> <p>Get all record with date of birth after 2000 <pre><code>curl -X 'GET' \\\n'http://localhost:8000/user/?date_of_birth__op=gt&amp;date_of_birth=2000-01-01'\\\n-H 'accept: application/json' </code></pre></p> <p>Get all record with name containing \"John\" <pre><code>curl -X 'GET' \\\n'http://localhost:8000/user/?name__op=contains&amp;name=John'\\\n-H 'accept: application/json' </code></pre></p> <p>Get all record with address starting with \"Street\" <pre><code>curl -X 'GET' \\\n'http://localhost:8000/user/?address__op=startswith&amp;address=Street'\\\n-H 'accept: application/json' </code></pre></p> <p>Get all record with address null <pre><code>curl -X 'GET' \\\n'http://localhost:8000/user/?address__op=is_null'\\\n-H 'accept: application/json' </code></pre></p>"},{"location":"crud/read/#pagination_1","title":"Pagination","text":"<p>Get the second page of records with 10 records per page <pre><code>curl -X 'GET' \\\n'http://localhost:8000/user/?page=2&amp;page_size=10'\\\n-H 'accept: application/json' </code></pre></p>"},{"location":"crud/read/#response_1","title":"Response","text":"<p>Example of what the response will look like with 3 records:</p> <pre><code>{\n\"total\": 3,\n\"page\": 1,\n\"records\": [\n{\n\"id\": 1,\n\"name\": \"John\",\n\"age\": 23,\n\"date_of_birth\": \"2000-01-01\",\n\"address\": \"Street 1\"\n}\n{\n\"id\": 2,\n\"name\": \"Pepe\",\n\"age\": 33,\n\"date_of_birth\": \"1990-01-01\",\n\"address\": \"Street 2\"\n},\n{\n\"id\": 3,\n\"name\": \"Math\",\n\"age\": 43,\n\"date_of_birth\": \"1980-01-01\",\n\"address\": \"Street 3\"\n}\n]\n}\n</code></pre>"},{"location":"crud/update/","title":"Update","text":"<p>Update a record by sending a <code>PUT</code> request with the primary key as part of the path and a <code>json</code> in the payload with the name of the columns that you want to update as keys.</p>"},{"location":"crud/update/#examples","title":"Examples","text":"<p>For the example we will assume the SQLAlchemyAPI CRUD is mounted in <code>http://localhost:8000/user/</code> using the following SQLAlchemy model definition.</p> <pre><code>class User(Base):\n    __tablename__ = \"user\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    age = Column(Integer, nullable=False)\n    date_of_birth = Column(Date)\n    address = Column(String(100))\n</code></pre>"},{"location":"crud/update/#update","title":"Update","text":"<p>Update a record by using the following payload:</p> <p><pre><code>{\n\"address\": \"Street 2\"\n}\n</code></pre> Request to update a record with primary key <code>1</code>:</p> <pre><code>curl -X 'PUT' \\\n'http://localhost:8000/user/1' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"address\": \"Street 2\"\n}'\n</code></pre> <p>The response will be the updated record, example response: <pre><code>{\n\"id\": 1,\n\"name\": \"John\",\n\"age\": 18,\n\"date_of_birth\": \"2000-01-01\",\n\"address\": \"Street 2\"\n}\n</code></pre></p>"},{"location":"crud/validation/","title":"Validation and Serialization","text":"<p>Validation and serialization of the data is done using Pydantic v2 models. It validates data type, required fields, default values, etc. When a validation fails, it raises a ValidationError exception and returns a <code>422</code> (Unprocessable Entity) response with the description in the response in the <code>detail</code> key.</p>"},{"location":"crud/validation/#examples","title":"Examples","text":"<p>For a SQLAlchemy model with the following definition</p> <pre><code>class User(Base):\n    __tablename__ = \"user\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), default=\"Carl Sagan\")\n    age = Column(Integer)\n    date_of_birth = Column(Date, nullable=False)\n    address = Column(String(100))\n</code></pre>"},{"location":"crud/validation/#try-to-create-a-new-record-with-invalid-field","title":"Try to create a new record with invalid field","text":"<p>Request to <code>POST</code> method with the following data: <pre><code>{\n\"name\": \"John\",\n\"age\": \"foo\",\n\"date_of_birth\": \"2000-01-01\",\n\"address\": \"Street 1\"\n}\n</code></pre></p> <p>Will return an error like this: <pre><code>{\n\"detail\": [\n{\n\"type\": \"int_parsing\",\n\"loc\": [\n\"age\"\n],\n\"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n\"input\": \"foo\",\n\"url\": \"https://errors.pydantic.dev/2.0.3/v/int_parsing\"\n}\n]\n}\n</code></pre></p>"},{"location":"crud/validation/#try-to-create-a-new-record-with-missing-required-field","title":"Try to create a new record with missing required field","text":"<p>Request to <code>POST</code> method with the following data: <pre><code>{\n\"name\": \"John\",\n\"age\": 18,\n\"address\": \"Street 1\"\n}\n</code></pre> Will return an error like this: <pre><code>{\n\"detail\": [\n{\n\"type\": \"missing\",\n\"loc\": [\n\"date_of_birth\"\n],\n\"msg\": \"Field required\",\n\"input\": {\n\"name\": \"John\",\n\"age\": 18,\n\"address\": \"Street 1\"\n},\n\"url\": \"https://errors.pydantic.dev/2.0.3/v/missing\"\n}\n]\n}\n</code></pre></p>"}]}